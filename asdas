// package main

// import (
// 	"html/template"
// 	"io"
// 	"log"
// 	"net/http"
// 	"strconv"
// 	"strings"

// 	"github.com/test/dirs"
// )

// Data is a struct that will be sent as a wpond
type Data struct {
	Output    string
	ErrorNum  int
	ErrorText string
}

var temp *template.Template

func main() {
	http.HandleFunc("/", handler)

	FileServer := http.FileServer(http.Dir("dirs"))
	http.Handle("/dirs/", http.StripPrefix("/dirs/", FileServer))

	err := http.ListenAndServe(":8080", nil)
	log.Fatal(err)
}

// handler
func handler(w http.ResponseWriter, r *http.Request) {
	d := Data{}
	temp = template.New("templates/*.html")

	if r.URL.Path != "/" {
		d.ErrorNum = 404
		d.ErrorText = "Page Not Found"
		errorHandler(w, r, &d)
		return
	}

	if r.Method == "GET" {
		temp.ExecuteTemplate(w, "index.html", d)

	} else if r.Method == "POST" {
		text := r.FormValue("input")
		font := r.FormValue("font")

		out, err := dirs.GetArt(text, font)
		if err != nil {
			d.ErrorNum = 500
			d.ErrorText = "Internal Server Error"
			errorHandler(w, r, &d)
			return
		}
		d.Output = out

		if r.FormValue("process") == "show" {
			temp.ExecuteTemplate(w, "index.html", d)
		} else if r.FormValue("process") == "download" {
			a := strings.NewReader(d.Output)
			w.Header().Set("Content-Disposition", "attachment; filename=file.txt")
			w.Header().Set("Content-Length", strconv.Itoa(len(d.Output)))
			io.Copy(w, a)
		} else {
			d.ErrorNum = 400
			d.ErrorText = "Bad Request"
			errorHandler(w, r, &d)
			return
		}
	} else {
		d.ErrorNum = 400
		d.ErrorText = "Bad Request"
		errorHandler(w, r, &d)
		return
	}
}

func errorHandler(w http.ResponseWriter, r *http.Request, d *Data) {
	w.WriteHeader(d.ErrorNum)
	temp.ExecuteTemplate(w, "error.html", d)
}
